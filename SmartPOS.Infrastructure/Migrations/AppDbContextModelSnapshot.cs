// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartPOS.Infrastructure.Persistence.Data;

#nullable disable

namespace SmartPOS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("ExternalPartySequence");

            modelBuilder.HasSequence("TransactionSequence");

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductInventoryLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductInstanceId", "UnitOfMeasureId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("ProductInventoryLevels");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductLevelChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<int>("ChangedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PreviousQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductInventoryLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryLevelId");

                    b.HasIndex("TransactionId");

                    b.ToTable("ProductLevelChange");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.SerialUnitChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NewWarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("OldWarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductLevelChangeId")
                        .HasColumnType("int");

                    b.Property<int>("SerializedUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewWarehouseId");

                    b.HasIndex("OldWarehouseId");

                    b.HasIndex("ProductLevelChangeId");

                    b.HasIndex("SerializedUnitId");

                    b.ToTable("SerialUnitChange");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.SerializedUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductInstancePriceProductInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductInstancePriceUnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductInventoryLevelId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryLevelId");

                    b.HasIndex("ProductInstanceId", "SerialNumber")
                        .IsUnique();

                    b.HasIndex("ProductInstanceId", "UnitOfMeasureId");

                    b.HasIndex("ProductInstancePriceProductInstanceId", "ProductInstancePriceUnitOfMeasureId");

                    b.ToTable("SerializedUnit");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.ExternalParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ExternalPartySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.HR.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Safe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CashStartBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChequeStartBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VISAStartBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Safes");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLeaf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ShelfLifeInDays")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultQuantityAlertLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasFilter("[Sku] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sku"), false);

                    b.ToTable("ProductInstances", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstancePrice", b =>
                {
                    b.Property<int>("ProductInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductInstanceId", "UnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("ProductInstancePrices", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TransactionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Users.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Client", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.ExternalEntities.ExternalParty");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Customer", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.ExternalEntities.ExternalParty");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Supplier", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.ExternalEntities.ExternalParty");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.InventoryTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.Transaction");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasIndex("WarehouseId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.Transaction");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.HasIndex("PartyId");

                    b.HasIndex("SafeId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.SafeTransferTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.Transaction");

                    b.Property<int>("ReceivingSafeId")
                        .HasColumnType("int");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.HasIndex("ReceivingSafeId");

                    b.HasIndex("SafeId");

                    b.ToTable("SafeTransferTransaction");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.ClientSalesTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.InventoryTransaction");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.HasIndex("ClientId");

                    b.HasIndex("SafeId");

                    b.ToTable("ClientSalesTransactions");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.CustomerSalesTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.InventoryTransaction");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SafeId");

                    b.ToTable("CustomerSalesTransactions");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.ProductTransferTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.InventoryTransaction");

                    b.Property<int>("ReceivingWarehouseId")
                        .HasColumnType("int");

                    b.HasIndex("ReceivingWarehouseId");

                    b.ToTable("ProductTransferTransactions");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.PurchaseTransaction", b =>
                {
                    b.HasBaseType("SmartPOS.Domain.Entities.Transactions.InventoryTransaction");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("SafeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseTransactions");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductInventoryLevel", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "ProductInstance")
                        .WithMany()
                        .HasForeignKey("ProductInstanceId", "UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInstance");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductLevelChange", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Accounting.ProductInventoryLevel", null)
                        .WithMany("Changes")
                        .HasForeignKey("ProductInventoryLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Transactions.InventoryTransaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.SerialUnitChange", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Warehouse", "NewWarehouse")
                        .WithMany()
                        .HasForeignKey("NewWarehouseId");

                    b.HasOne("SmartPOS.Domain.Entities.Organization.Warehouse", "OldWarehouse")
                        .WithMany()
                        .HasForeignKey("OldWarehouseId");

                    b.HasOne("SmartPOS.Domain.Entities.Accounting.ProductLevelChange", "ProductLevelChange")
                        .WithMany("StatusChanges")
                        .HasForeignKey("ProductLevelChangeId");

                    b.HasOne("SmartPOS.Domain.Entities.Accounting.SerializedUnit", "SerializedUnit")
                        .WithMany("StatusChanges")
                        .HasForeignKey("SerializedUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewWarehouse");

                    b.Navigation("OldWarehouse");

                    b.Navigation("ProductLevelChange");

                    b.Navigation("SerializedUnit");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.SerializedUnit", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Accounting.ProductInventoryLevel", null)
                        .WithMany("SerializedUnits")
                        .HasForeignKey("ProductInventoryLevelId");

                    b.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "Product")
                        .WithMany()
                        .HasForeignKey("ProductInstanceId", "UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", null)
                        .WithMany("SerializedUnits")
                        .HasForeignKey("ProductInstancePriceProductInstanceId", "ProductInstancePriceUnitOfMeasureId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Branch", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Users.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Warehouse", b =>
                {
                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("WarehouseId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("Warehouses");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Attribute", b =>
                {
                    b.OwnsMany("SmartPOS.Domain.Entities.Products.AttributeValue", "AttributeValues", b1 =>
                        {
                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("AttributeId", "Id");

                            b1.ToTable("AttributeValues", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AttributeId");
                        });

                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Category", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Products.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Products.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstance", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Products.Product", "Product")
                        .WithMany("Instances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SmartPOS.Domain.Entities.Products.ProductInstanceAttributeValue", "AttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeValueId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("AttributeValueId"));

                            b1.HasKey("ProductInstanceId", "AttributeId", "AttributeValueId");

                            b1.HasIndex("AttributeId");

                            b1.HasIndex("ProductInstanceId", "AttributeId")
                                .IsUnique();

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("ProductInstanceId", "AttributeId"), false);

                            b1.ToTable("ProductInstanceAttributeValues", (string)null);

                            b1.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                            b1.HasOne("SmartPOS.Domain.Entities.Products.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductInstanceId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("SmartPOS.Domain.ValueObjects.Image", "Images", b1 =>
                        {
                            b1.Property<string>("Path")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.HasKey("Path");

                            b1.HasIndex("ProductInstanceId");

                            b1.ToTable("ProductInstanceImages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductInstanceId");
                        });

                    b.Navigation("AttributeValues");

                    b.Navigation("Images");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstancePrice", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Products.ProductInstance", "ProductInstance")
                        .WithMany("Prices")
                        .HasForeignKey("ProductInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Products.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInstance");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Users.Employee", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.HR.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Branch");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Client", b =>
                {
                    b.OwnsMany("SmartPOS.Domain.ValueObjects.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.ToTable("ClientAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("SmartPOS.Domain.ValueObjects.ContactPerson", "Contacts", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Position")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.ToTable("ClientContacts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<int>("ContactPersonId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)")
                                        .HasColumnName("PhoneNumber");

                                    b2.HasKey("ContactPersonId");

                                    b2.ToTable("ClientContacts");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactPersonId");
                                });

                            b1.Navigation("PhoneNumber")
                                .IsRequired();
                        });

                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Customer", b =>
                {
                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.ExternalEntities.Supplier", b =>
                {
                    b.OwnsMany("SmartPOS.Domain.ValueObjects.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<int>("SupplierId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SupplierId");

                            b1.ToTable("SupplierAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsMany("SmartPOS.Domain.ValueObjects.ContactPerson", "Contacts", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Position")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SupplierId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SupplierId");

                            b1.ToTable("SupplierContacts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<int>("ContactPersonId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)")
                                        .HasColumnName("PhoneNumber");

                                    b2.HasKey("ContactPersonId");

                                    b2.ToTable("SupplierContacts");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactPersonId");
                                });

                            b1.Navigation("PhoneNumber")
                                .IsRequired();
                        });

                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.InventoryTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.ExternalEntities.ExternalParty", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "Safe")
                        .WithMany()
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<int>("PaymentTransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("PaymentTransactionId");

                            b1.ToTable("PaymentTransactions");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionId");
                        });

                    b.Navigation("Party");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.SafeTransferTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "ReceivingSafe")
                        .WithMany()
                        .HasForeignKey("ReceivingSafeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "Safe")
                        .WithMany()
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<int>("SafeTransferTransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("SafeTransferTransactionId");

                            b1.ToTable("SafeTransferTransaction");

                            b1.WithOwner()
                                .HasForeignKey("SafeTransferTransactionId");
                        });

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("ReceivingSafe");

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.ClientSalesTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.ExternalEntities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "Safe")
                        .WithMany()
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.DeliveryDetails", "DeliveryDetails", b1 =>
                        {
                            b1.Property<int>("ClientSalesTransactionId")
                                .HasColumnType("int");

                            b1.HasKey("ClientSalesTransactionId");

                            b1.ToTable("ClientSalesTransactions");

                            b1.WithOwner()
                                .HasForeignKey("ClientSalesTransactionId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("DeliveryDetailsClientSalesTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("Comment")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)");

                                    b2.Property<string>("State")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("nvarchar(200)");

                                    b2.HasKey("DeliveryDetailsClientSalesTransactionId");

                                    b2.ToTable("ClientSalesTransactions");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryDetailsClientSalesTransactionId");
                                });

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<int>("DeliveryDetailsClientSalesTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)")
                                        .HasColumnName("PhoneNumber");

                                    b2.HasKey("DeliveryDetailsClientSalesTransactionId");

                                    b2.ToTable("ClientSalesTransactions");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryDetailsClientSalesTransactionId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();

                            b1.Navigation("PhoneNumber");
                        });

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<int>("ClientSalesTransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("ClientSalesTransactionId");

                            b1.ToTable("ClientSalesTransactions");

                            b1.WithOwner()
                                .HasForeignKey("ClientSalesTransactionId");
                        });

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.SalesTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("DiscountPercentage")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("InventoryTransactionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitCost")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("UnitOfMeasureID")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitPriceBeforeDiscount")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("InventoryTransactionId");

                            b1.HasIndex("ProductInstanceId", "UnitOfMeasureID");

                            b1.ToTable("ClientSalesTransactions_Items");

                            b1.WithOwner()
                                .HasForeignKey("InventoryTransactionId");

                            b1.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "Unit")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId", "UnitOfMeasureID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Unit");
                        });

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.ExternalEntityInventoryTransactionReturn", "Returns", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TransactionId");

                            b1.ToTable("ClientSalesTransactions_Returns");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Comment")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<decimal>("PayedAmount")
                                        .HasColumnType("decimal(18,2)");

                                    b2.Property<int>("Type")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasDefaultValue(0);

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId");

                                    b2.ToTable("ClientSalesTransactions_Returns");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.OwnsMany("SmartPOS.Domain.Entities.Transactions.InventoryTransactionItemReturn", "ReturnedItems", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("InventoryTransactionItemId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.Property<int>("ReturnTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("UnitCost")
                                        .HasColumnType("decimal(18,2)");

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId", "Id");

                                    b2.ToTable("ClientSalesTransactions_Returns_ReturnedItems");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.Navigation("Payment");

                            b1.Navigation("ReturnedItems");
                        });

                    b.Navigation("Client");

                    b.Navigation("DeliveryDetails")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Payment");

                    b.Navigation("Returns");

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.CustomerSalesTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.ExternalEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "Safe")
                        .WithMany()
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.DeliveryDetails", "DeliveryDetails", b1 =>
                        {
                            b1.Property<int>("CustomerSalesTransactionId")
                                .HasColumnType("int");

                            b1.HasKey("CustomerSalesTransactionId");

                            b1.ToTable("CustomerSalesTransactions");

                            b1.WithOwner()
                                .HasForeignKey("CustomerSalesTransactionId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("DeliveryDetailsCustomerSalesTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("Comment")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)");

                                    b2.Property<string>("State")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("nvarchar(200)");

                                    b2.HasKey("DeliveryDetailsCustomerSalesTransactionId");

                                    b2.ToTable("CustomerSalesTransactions");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryDetailsCustomerSalesTransactionId");
                                });

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<int>("DeliveryDetailsCustomerSalesTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)")
                                        .HasColumnName("PhoneNumber");

                                    b2.HasKey("DeliveryDetailsCustomerSalesTransactionId");

                                    b2.ToTable("CustomerSalesTransactions");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryDetailsCustomerSalesTransactionId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();

                            b1.Navigation("PhoneNumber");
                        });

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<int>("CustomerSalesTransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("CustomerSalesTransactionId");

                            b1.ToTable("CustomerSalesTransactions");

                            b1.WithOwner()
                                .HasForeignKey("CustomerSalesTransactionId");
                        });

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.SalesTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("DiscountPercentage")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("InventoryTransactionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitCost")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("UnitOfMeasureID")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitPriceBeforeDiscount")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("InventoryTransactionId");

                            b1.HasIndex("ProductInstanceId", "UnitOfMeasureID");

                            b1.ToTable("CustomerSalesTransactions_Items");

                            b1.WithOwner()
                                .HasForeignKey("InventoryTransactionId");

                            b1.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "Unit")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId", "UnitOfMeasureID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Unit");
                        });

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.ExternalEntityInventoryTransactionReturn", "Returns", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TransactionId");

                            b1.ToTable("CustomerSalesTransactions_Returns");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Comment")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<decimal>("PayedAmount")
                                        .HasColumnType("decimal(18,2)");

                                    b2.Property<int>("Type")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasDefaultValue(0);

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId");

                                    b2.ToTable("CustomerSalesTransactions_Returns");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.OwnsMany("SmartPOS.Domain.Entities.Transactions.InventoryTransactionItemReturn", "ReturnedItems", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("InventoryTransactionItemId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.Property<int>("ReturnTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("UnitCost")
                                        .HasColumnType("decimal(18,2)");

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId", "Id");

                                    b2.ToTable("CustomerSalesTransactions_Returns_ReturnedItems");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.Navigation("Payment");

                            b1.Navigation("ReturnedItems");
                        });

                    b.Navigation("Customer");

                    b.Navigation("DeliveryDetails")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Payment");

                    b.Navigation("Returns");

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.ProductTransferTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Warehouse", "ReceivingWarehouse")
                        .WithMany()
                        .HasForeignKey("ReceivingWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.InventoryTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("InventoryTransactionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitCost")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("UnitOfMeasureID")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("InventoryTransactionId");

                            b1.HasIndex("ProductInstanceId", "UnitOfMeasureID");

                            b1.ToTable("ProductTransferTransactions_Items");

                            b1.WithOwner()
                                .HasForeignKey("InventoryTransactionId");

                            b1.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "Unit")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId", "UnitOfMeasureID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Unit");
                        });

                    b.Navigation("Items");

                    b.Navigation("ReceivingWarehouse");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Transactions.PurchaseTransaction", b =>
                {
                    b.HasOne("SmartPOS.Domain.Entities.Organization.Safe", "Safe")
                        .WithMany()
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPOS.Domain.Entities.ExternalEntities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.InventoryTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("InventoryTransactionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitCost")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("UnitOfMeasureID")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("InventoryTransactionId");

                            b1.HasIndex("ProductInstanceId", "UnitOfMeasureID");

                            b1.ToTable("PurchaseTransactions_Items");

                            b1.WithOwner()
                                .HasForeignKey("InventoryTransactionId");

                            b1.HasOne("SmartPOS.Domain.Entities.Products.ProductInstancePrice", "Unit")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId", "UnitOfMeasureID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Unit");
                        });

                    b.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<int>("PurchaseTransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("PurchaseTransactionId");

                            b1.ToTable("PurchaseTransactions");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseTransactionId");
                        });

                    b.OwnsMany("SmartPOS.Domain.Entities.Transactions.ExternalEntityInventoryTransactionReturn", "Returns", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TransactionId");

                            b1.ToTable("PurchaseTransactions_Returns");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.OwnsOne("SmartPOS.Domain.ValueObjects.Payment", "Payment", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Comment")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<decimal>("PayedAmount")
                                        .HasColumnType("decimal(18,2)");

                                    b2.Property<int>("Type")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasDefaultValue(0);

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId");

                                    b2.ToTable("PurchaseTransactions_Returns");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.OwnsMany("SmartPOS.Domain.Entities.Transactions.InventoryTransactionItemReturn", "ReturnedItems", b2 =>
                                {
                                    b2.Property<int>("ExternalEntityInventoryTransactionReturnId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("InventoryTransactionItemId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.Property<int>("ReturnTransactionId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("UnitCost")
                                        .HasColumnType("decimal(18,2)");

                                    b2.HasKey("ExternalEntityInventoryTransactionReturnId", "Id");

                                    b2.ToTable("PurchaseTransactions_Returns_ReturnedItems");

                                    b2.WithOwner()
                                        .HasForeignKey("ExternalEntityInventoryTransactionReturnId");
                                });

                            b1.Navigation("Payment");

                            b1.Navigation("ReturnedItems");
                        });

                    b.Navigation("Items");

                    b.Navigation("Payment");

                    b.Navigation("Returns");

                    b.Navigation("Safe");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductInventoryLevel", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("SerializedUnits");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.ProductLevelChange", b =>
                {
                    b.Navigation("StatusChanges");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Accounting.SerializedUnit", b =>
                {
                    b.Navigation("StatusChanges");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Organization.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Category", b =>
                {
                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstance", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("SmartPOS.Domain.Entities.Products.ProductInstancePrice", b =>
                {
                    b.Navigation("SerializedUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
